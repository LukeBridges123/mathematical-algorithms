#Includes the Fermat primality test, trial division, and a modified version of trial division which only checks for prime factors instead
#of dividing by all numbers less than the checked number's square root. Uses a randomly generated prime as a test case to show the
#performance speeds of the different tests.
import math
p = 687944095511801 #generated by bigprimes.org

def primeSieve(n):
    lim = n + 1
    boolList = [True] * lim
    primeList = []
    currNum = 2
    while (currNum < lim):
        primeList.append(currNum)
        i = currNum * 2
        while (i < lim):
            boolList[i] = False
            i += currNum
        currNum += 1;
        while (currNum < lim and boolList[currNum] == False):
            currNum += 1
    return primeList

def trialDivision(n):
    root = math.sqrt(n);
    i = 2
    while (i <= root):
        if n % i == 0:
            return False;
        i += 1;
    return True
    
def sieveTrialDivision(n):
    root = math.floor(math.sqrt(n))
    primeList = primeSieve(root)
    i = 0
    while (i < len(primeList)):
        if n % primeList[i] == 0:
            return False
        i += 1
    return True

def fermatTest(n):
    if pow(2, n - 1, n) != 1: 
        return False
    return True
print(trialDivision(p))
print(sieveTrialDivision(p))
print(fermatTest(p))
